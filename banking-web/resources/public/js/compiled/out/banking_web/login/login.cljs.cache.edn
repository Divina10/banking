;; Analyzed by ClojureScript 1.7.107
{:use-macros nil, :excludes #{}, :name banking-web.login.login, :imports nil, :requires {secretary secretary.core, secretary.core secretary.core, v reforms.validation, reforms.validation reforms.validation, reagent reagent.core, reagent.core reagent.core}, :uses {atom reagent.core, render-component reagent.core}, :defs {user {:name banking-web.login.login/user, :file "src\\banking_web\\login\\login.cljs", :line 14, :column 3, :end-line 14, :end-column 12, :meta {:file "C:\\dev\\banking\\banking-web\\src\\banking_web\\login\\login.cljs", :line 14, :column 8, :end-line 14, :end-column 12}}, ui-state {:name banking-web.login.login/ui-state, :file "src\\banking_web\\login\\login.cljs", :line 15, :column 3, :end-line 15, :end-column 16, :meta {:file "C:\\dev\\banking\\banking-web\\src\\banking_web\\login\\login.cljs", :line 15, :column 8, :end-line 15, :end-column 16}}, signup-validators {:name banking-web.login.login/signup-validators, :file "src\\banking_web\\login\\login.cljs", :line 17, :column 3, :end-line 17, :end-column 25, :meta {:file "C:\\dev\\banking\\banking-web\\src\\banking_web\\login\\login.cljs", :line 17, :column 8, :end-line 17, :end-column 25}}, sign-up! {:protocol-inline nil, :meta {:file "C:\\dev\\banking\\banking-web\\src\\banking_web\\login\\login.cljs", :line 21, :column 9, :end-line 21, :end-column 17, :arglists (quote ([user ui-state]))}, :name banking-web.login.login/sign-up!, :variadic false, :file "src\\banking_web\\login\\login.cljs", :end-column 17, :method-params ([user ui-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([user ui-state]))}, signup-view {:protocol-inline nil, :meta {:file "C:\\dev\\banking\\banking-web\\src\\banking_web\\login\\login.cljs", :line 39, :column 9, :end-line 39, :end-column 20, :arglists (quote ([]))}, :name banking-web.login.login/signup-view, :variadic false, :file "src\\banking_web\\login\\login.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 39, :end-line 39, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {secretary secretary.core, secretary.core secretary.core, v reforms.validation, reforms.validation reforms.validation, reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:placeholder ui-state reforms.binding.core/valid? :password1 :login :on-submit}, :order [:login :password1 reforms.binding.core/valid? ui-state :on-submit :placeholder]}, :doc nil}